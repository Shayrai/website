{"version":3,"sources":["utils.js","LivingDex/ListRow.jsx","queries/getAllPokemon.jsx","LivingDex/List.jsx","LivingDex/Options.jsx","LivingDex/LivingDex.jsx","Home.jsx","ChildRoutes.jsx","index.js"],"names":["getPokemonPicture","name","shiny","width","height","id","alt","src","getPokemonPictureSmall","ListRow","details","obtained","pokemon","display","className","charAt","toUpperCase","slice","has_gender_differences","concat","type","disabled","checked","getAllPokemon","gql","List","alternates","shinies","Header","useQuery","loading","error","data","Row","showShiny","some","pokemon2","console","log","Rows","showAlt","pokemon_v2_pokemonspecies","map","Options","AltBox","onChange","setShowAlt","htmlFor","ShinyBox","setShowShiny","LivingDex","useState","Home","ChildRoutes","path","exact","client","ApolloClient","uri","cache","InMemoryCache","Renderable","StrictMode","ApolloProvider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e23ff14.chunk.js","sourcesContent":["export const getPokemonPicture = (name, shiny=false, width=null, height=null) => {\r\n  return (\r\n    <span id=\"pokemon\">\r\n      <img\r\n        alt={`${name}-${!shiny ? 'normal' : 'shiny'}`}\r\n        src={`https://img.pokemondb.net/sprites/home/${!shiny ? 'normal' : 'shiny'}/${name}.png`}\r\n        width={width}\r\n        height={height}\r\n      />\r\n    </span>\r\n  )\r\n}\r\n\r\nexport const getPokemonPictureSmall = (name, shiny=false) => {\r\n  return getPokemonPicture(name, shiny, \"15%\");\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { getPokemonPictureSmall } from '../utils';\r\n\r\nconst ListRow = ({details, obtained, shiny}) => {\r\n  const {\r\n    pokemon,\r\n    display\r\n  } = details;\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='number col-md-3'>{pokemon.id}</div>\r\n      <div className='name col-md-3'>\r\n        {shiny && 'Shiny '}\r\n        {pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1)}\r\n        {pokemon.has_gender_differences && (\" \" .concat(display))}\r\n      </div>\r\n      <div className='picture col-md-3'>\r\n        {getPokemonPictureSmall(\r\n          pokemon.name.concat(\r\n            pokemon.has_gender_differences && display === 'female'\r\n              ? '-f' : ''\r\n          ),\r\n          shiny\r\n        )}\r\n      </div>\r\n      <div className='obtained col-md-3'>\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"obtainedPokemon\"\r\n          name=\"obtainedPokemon\"\r\n          disabled=\"disabled\"\r\n          checked={obtained}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nListRow.propTypes = {\r\n  details: PropTypes.shape().isRequired,\r\n  obtained: PropTypes.bool.isRequired,\r\n  shiny: PropTypes.bool,\r\n}\r\n\r\nexport default ListRow;","import { gql } from '@apollo/client';\r\n\r\nconst getAllPokemon = gql`\r\n  query getAllPokemon {\r\n    pokemon_v2_pokemonspecies(order_by: {id: asc}, limit: 10) {\r\n      name\r\n      has_gender_differences\r\n      id\r\n      pokemon_v2_pokemons {\r\n        pokemon_v2_pokemonforms {\r\n          form_name\r\n          is_battle_only\r\n          is_default\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default getAllPokemon","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport obtained from '../data/obtained.json';\r\nimport ListRow from './ListRow';\r\n\r\nimport getAllPokemon from '../queries/getAllPokemon';\r\nimport { useQuery } from '@apollo/client';\r\n\r\nconst List = ({alternates, shinies}) => {\r\n\r\n  const Header = () => {\r\n    return (\r\n      <div className='row'>\r\n        <div className='col-md-3'>ID</div>\r\n        <div className='col-md-3'>Name</div>\r\n        <div className='col-md-3'>Picture</div>\r\n        <div className='col-md-3'>Obtained</div>\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const { loading, error, data } = useQuery(getAllPokemon);\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n\r\n  const Row = ({pokemon, showShiny}) => {\r\n    return (\r\n      <>\r\n        <ListRow\r\n          details={{\r\n            pokemon: pokemon,\r\n            display: pokemon.has_gender_differences && \"male\"\r\n          }}\r\n          obtained={\r\n            obtained.some((pokemon2) => {\r\n              console.log(pokemon.id == pokemon2.id)\r\n              return pokemon.id == pokemon2.id && pokemon2.shiny === showShiny\r\n            })\r\n          }\r\n          shiny={showShiny}\r\n        />\r\n        {pokemon.has_gender_differences && (\r\n          <>\r\n            <br />\r\n            <ListRow\r\n              details={{\r\n                pokemon: pokemon,\r\n                display: \"female\"\r\n              }}\r\n              obtained={\r\n                obtained.some((pokemon2) => (\r\n                  pokemon.id == pokemon2.id && pokemon2.shiny === showShiny\r\n                ))\r\n              }\r\n              shiny={showShiny}\r\n            />\r\n          </>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  const Rows = () => {\r\n    const { showAlt } = alternates;\r\n    const { showShiny } = shinies;\r\n\r\n    const { pokemon_v2_pokemonspecies: species } = data;\r\n\r\n    return species.map((pokemon) => (\r\n      <>\r\n        <Row pokemon={pokemon} showShiny={false} />\r\n        {showShiny && (<><br /> <Row pokemon={pokemon} showShiny={true} /></>)}\r\n        <br />\r\n      </>\r\n    ));\r\n\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Rows />\r\n    </>\r\n  )\r\n}\r\n\r\nList.propTypes = {\r\n  alternates: PropTypes.shape({\r\n    showAlt: PropTypes.bool.isRequired,\r\n    setShowAlt: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  shinies: PropTypes.shape({\r\n    showShiny: PropTypes.bool.isRequired,\r\n    setShowShiny: PropTypes.func.isRequired,\r\n  }).isRequired\r\n};\r\n\r\nexport default List;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Options = ({alternates, shinies}) => {\r\n\r\n  const AltBox = () => {\r\n    return (\r\n      <>\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"alternateForms\"\r\n          name=\"alternateForms\"\r\n          checked={alternates.showAlt}\r\n          onChange={\r\n            () => alternates.setShowAlt(!alternates.showAlt)\r\n          }\r\n        />\r\n        <label htmlFor=\"alternateForms\">Alternate Forms?</label>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const ShinyBox = () => {\r\n    return (\r\n      <>\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"shinyForms\"\r\n          name=\"shinyForms\"\r\n          checked={shinies.showShiny}\r\n          onChange={\r\n            () => shinies.setShowShiny(!shinies.showShiny)\r\n          }\r\n        />\r\n        <label htmlFor=\"alternateForms\">Shinies?</label>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <AltBox />\r\n      <ShinyBox />\r\n    </>\r\n  )\r\n\r\n};\r\n\r\nOptions.propTypes = {\r\n  alternates: PropTypes.shape({\r\n    showAlt: PropTypes.bool.isRequired,\r\n    setShowAlt: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  shinies: PropTypes.shape({\r\n    showShiny: PropTypes.bool.isRequired,\r\n    setShowShiny: PropTypes.func.isRequired,\r\n  }).isRequired\r\n};\r\n\r\nexport default Options;","import React, { useState } from 'react';\r\nimport List from './List';\r\nimport Options from './Options';\r\n\r\nconst LivingDex = () => {\r\n  \r\n  const [ showAlt, setShowAlt ] = useState(false);\r\n  const [ showShiny, setShowShiny ] = useState(false);\r\n\r\n  const alternates = { showAlt, setShowAlt };\r\n  const shinies = { showShiny, setShowShiny };\r\n\r\n  return (\r\n    <>\r\n      <Options alternates={alternates} shinies={shinies} />\r\n      <br />\r\n      <List\r\n        alternates={alternates}\r\n        shinies={shinies}\r\n      />\r\n    </>\r\n  )\r\n};\r\n\r\nexport default LivingDex;","import React from 'react';\r\nimport LivingDex from './LivingDex/LivingDex';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <>\r\n      <LivingDex />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Home from './Home';\r\n\r\nconst ChildRoutes = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/\" exact>\r\n          <Home />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n\r\n}\r\nexport default ChildRoutes;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ChildRoutes from './ChildRoutes';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n} from \"@apollo/client\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'https://beta.pokeapi.co/graphql/v1beta',\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nconst Renderable = () => (\r\n  <React.StrictMode>\r\n    <ApolloProvider client={client}>\r\n      <ChildRoutes />\r\n    </ApolloProvider>\r\n  </React.StrictMode>\r\n)\r\n\r\n\r\nReactDOM.render(<Renderable />, document.getElementById('root'));\r\n"],"sourceRoot":""}